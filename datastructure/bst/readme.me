============================================================
A. what is binary search tree?

1. has 2 children: left and right
2. left child is less than parent
3. right child is greater than parent


---
what is benefit of binary search tree?


search is faster than linked list
O(log n) vs O(n)


---
why is it O(log n)?

because it is a tree, and it is balanced


---
what if it is not balanced tree?

it is O(n)


---
if it's O(n), why not just use binary search tree all the time? instead of linked list?


because it is not efficient to insert and delete

you can simple attach a new node to the end of the linked list, but you have to find the right place to insert in binary search tree




============================================================
B. what is AVL tree?

1. has 2 children: left and right
2. left child is less than parent
3. right child is greater than parent
--- binary search tree

4. height of left and right child is not more than 1


basically, 1~3 is same as binary search tree, but 4 is different


---
what is benefit of AVL tree?


search is faster than binary search tree
because it is balanced, therefore there is no broken balanced BST


---
how to balance AVL tree?


rotate


---
what is rotate?


see it yourself.

https://visualgo.net/en/bst?mode=AVL

try to insert a node that breaks the rule of AVL tree: height of left and right child is not more than 1

if you do, you will see that it rotates the tree to balance it



============================================================
C. what is red-black tree?


1. has 2 children: left and right
2. left child is less than parent
3. right child is greater than parent
--- binary search tree

4. height of left and right child is not more than 1 -> WRONG! height 제한이 더 느슨하기 때문에 rotate 덜해서 RBT가 AVL tree보다 overhead가 적은 것.
--- AVL tree

5. every node is either red or black
6. root is black
7. every leaves nodes(NIL) is black (NIL is not node, it is just a place holder)
8. if a node is red, both of its children are black
9. all paths from the root node to its NIL descendants contain the same number of black nodes
--- red black tree


---
red black tree의 다른 특징

1. node requires one bit of extra storage to hold the color information
2. root to fathest NIL is at most twice as long as root to nearest NIL
3. search is no different, but insert | remove requires rotations to maintain the properties. (search, insert, remove are all O(logN))


---
Q. if AVL tree and red black tree are both balanced, why do we need red black tree?


1. AVL tree requires more rotations to maintain balance than red black tree
2. AVL tree are more rigidly blanced than red black tree. therefore, more rotation -> more overhead


